from typing import Dict, Any, Optional
from datetime import datetime
from dateutil.parser import parse as parse_date

from inference import CalendarInference
from google_calendar_client import GoogleCalendarClient
from models import CalendarEvent
from logger import calendar_logger


class CalendarService:
    def __init__(self, model_path: str, credentials_path: str = "credentials.json"):
        self.inference = CalendarInference(model_path)
        self.calendar_client = GoogleCalendarClient(credentials_path)

    def process_user_request(self, user_message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º JSON –æ—Ç –º–æ–¥–µ–ª–∏
            event_data = self.inference.process_request(user_message)

            if not event_data:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.'
                }

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            calendar_event = self._create_calendar_event(event_data)

            if not calendar_event:
                return {
                    'success': False,
                    'message': '–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É.'
                }

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            return {
                'success': True,
                'action': 'confirm',
                'event': calendar_event,
                'message': self._format_event_confirmation(calendar_event)
            }

        except Exception as e:
            calendar_logger.log_error(e, "calendar_service.process_user_request")
            return {
                'success': False,
                'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
            }

    def create_confirmed_event(self, calendar_event: CalendarEvent) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
            google_event_data = calendar_event.to_google_event()
            result = self.calendar_client.create_event(google_event_data)

            return result or {
                'success': False,
                'message': '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è'
            }

        except Exception as e:
            calendar_logger.log_error(e, "calendar_service.create_confirmed_event")
            return {
                'success': False,
                'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}'
            }

    def _format_event_confirmation(self, event: CalendarEvent) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time_str = event.start_time.strftime("%d.%m.%Y –≤ %H:%M")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if event.end_time:
            end_time_str = event.end_time.strftime("%H:%M")
            duration_str = f"–¥–æ {end_time_str}"
        elif event.duration_minutes:
            hours = event.duration_minutes // 60
            minutes = event.duration_minutes % 60
            if hours > 0 and minutes > 0:
                duration_str = f"({hours}—á {minutes}–º–∏–Ω)"
            elif hours > 0:
                duration_str = f"({hours}—á)"
            else:
                duration_str = f"({minutes}–º–∏–Ω)"
        else:
            duration_str = "(1—á)"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å
        recurrence_str = ""
        if event.recurrence:
            recurrence_str = "\nüîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: –î–∞"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üìÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {event.title}
‚è∞ **–í—Ä–µ–º—è:** {start_time_str} {duration_str}"""

        if event.description:
            message += f"\nüìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {event.description}"
        
        message += recurrence_str
        message += "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è?"

        return message

    def _create_calendar_event(self, event_data: Dict[str, Any]) -> Optional[CalendarEvent]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç CalendarEvent –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏"""
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            title = event_data.get('title')
            start_time_str = event_data.get('start_time')

            if not title or not start_time_str:
                return None

            start_time = parse_date(start_time_str)

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            description = event_data.get('description')
            end_time = None
            duration_minutes = event_data.get('duration_minutes')

            if event_data.get('end_time'):
                end_time = parse_date(event_data['end_time'])

            recurrence = event_data.get('recurrence')

            return CalendarEvent(
                title=title,
                description=description,
                start_time=start_time,
                end_time=end_time,
                duration_minutes=duration_minutes,
                recurrence=recurrence
            )

        except Exception:
            calendar_logger.log_error(Exception("Failed to create CalendarEvent"), "calendar_service._create_calendar_event")
            return None
