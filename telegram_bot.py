import os
import asyncio
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from calendar_service import CalendarService


class TelegramBot:
    def __init__(self, token: str, model_path: str, credentials_path: str = "credentials.json"):
        self.token = token
        self.calendar_service = CalendarService(model_path, credentials_path)
        self.application = Application.builder().token(token).build()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(
            CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n"
            "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –Ω–∞ —á–∞—Å'\n"
            "‚Ä¢ '–û–±–µ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 –Ω–∞ 30 –º–∏–Ω—É—Ç'\n"
            "‚Ä¢ '–ü–ª–∞–Ω–µ—Ä–∫–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00'\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –∏ —Ç.–¥.)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 2 —á–∞—Å–∞'\n"
            "‚Ä¢ '–°–ø–æ—Ä—Ç–∑–∞–ª –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 19:00'\n"
            "‚Ä¢ '–û–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è –≤ 13:00-14:00'\n"
        )
        await update.message.reply_text(help_message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            result = self.calendar_service.process_user_request(user_message)

            if result.get('success'):
                response = f"‚úÖ {result['message']}"
                if result.get('event_link'):
                    response += f"\n\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ]({result['event_link']})"
            else:
                response = f"‚ùå {result['message']}"

            await update.message.reply_text(response, parse_mode='Markdown')

        except Exception as e:
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            await update.message.reply_text(error_message)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()


def main():
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    model_path = os.getenv(
        'MODEL_PATH', './models/saiga_gemma3_12b_q4_k_m.gguf')
    credentials_path = os.getenv('GOOGLE_CREDENTIALS_PATH', 'credentials.json')

    if not telegram_token:
        print("–û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return

    if not os.path.exists(model_path):
        print(f"–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ {model_path}")
        return

    if not os.path.exists(credentials_path):
        print(
            f"–û—à–∏–±–∫–∞: –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")
        return

    bot = TelegramBot(telegram_token, model_path, credentials_path)
    bot.run()


if __name__ == "__main__":
    main()
