from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import os

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from calendar_service import CalendarService
from voice_service import VoiceService
from logger import calendar_logger


class TelegramBot:
    def __init__(self, token: str, credentials_path: str = "credentials.json"):
        self.token = token
        self.calendar_service = CalendarService(credentials_path)
        self.voice_service = VoiceService(device="cpu")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        self.application = Application.builder().token(token).build()
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        self.pending_events = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users_str = os.getenv('TELEGRAM_ALLOWED_USERS', '').strip()
        if allowed_users_str:
            # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å username –∏–ª–∏ user_id)
            self.allowed_users = set()
            for user in allowed_users_str.split(','):
                user = user.strip()
                if user:
                    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ user_id, –∏–Ω–∞—á–µ –∫–∞–∫ username
                    if user.isdigit():
                        self.allowed_users.add(int(user))
                    else:
                        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                        username = user.lstrip('@').lower()
                        self.allowed_users.add(username)
        else:
            self.allowed_users = None  # None –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤—Å–µ–º
            
        self._setup_handlers()

    def _safe_url_encode(self, url: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è Telegram"""
        if not url:
            return ""
        
        # –î–ª—è Telegram –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å URL –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è HTML parse_mode
        return url

    def _is_user_allowed(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        if self.allowed_users is None:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
            
        user = update.effective_user
        if not user:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id
        if user.id in self.allowed_users:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if user.username and user.username.lower() in self.allowed_users:
            return True
            
        return False

    async def _send_access_denied_message(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞"""
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."
        )

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(
            CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self._is_user_allowed(update):
            await self._send_access_denied_message(update)
            return
            
        welcome_message = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –Ω–∞ —á–∞—Å'\n"
            "‚Ä¢ '–û–±–µ–¥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 –Ω–∞ 30 –º–∏–Ω—É—Ç'\n"
            "‚Ä¢ '–ü–ª–∞–Ω–µ—Ä–∫–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00'\n\n"
            "–Ø –ø–æ–∫–∞–∂—É –≤–∞–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self._is_user_allowed(update):
            await self._send_access_denied_message(update)
            return
            
        help_message = (
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n"
            "   üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ \"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ \"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å\"\n"
            "4Ô∏è‚É£ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ \"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\"\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –∏ —Ç.–¥.)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 2 —á–∞—Å–∞'\n"
            "‚Ä¢ '–°–ø–æ—Ä—Ç–∑–∞–ª –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 19:00'\n"
            "‚Ä¢ '–û–±–µ–¥ —Å–µ–≥–æ–¥–Ω—è –≤ 13:00-14:00'\n\n"
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç."
        )
        await update.message.reply_text(help_message)

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self._is_user_allowed(update):
            await self._send_access_denied_message(update)
            return
            
        user_id = str(update.effective_user.id) if update.effective_user else None
        username = update.effective_user.username if update.effective_user else None

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
            if not self.voice_service.is_model_loaded():
                await processing_message.edit_text("‚ùå –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice = update.message.voice
            voice_file = await context.bot.get_file(voice.file_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_message.edit_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            transcription = await self.voice_service.transcribe_voice_message(voice_file)

            if not transcription:
                await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            calendar_logger.log_user_request(user_id, username, f"[VOICE] {transcription}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_message.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: *{transcription}*\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", parse_mode='Markdown')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._process_text_request(update, transcription, processing_message)

        except Exception as e:
            calendar_logger.log_error(e, "telegram_bot.handle_voice_message")
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            await processing_message.edit_text(error_message)

    async def _process_text_request(self, update: Update, user_message: str, processing_message=None):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = str(update.effective_user.id) if update.effective_user else None

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            result = self.calendar_service.process_user_request(user_message)

            if result.get('success') and result.get('action') == 'confirm':
                # –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                event = result['event']
                message = result['message']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                event_id = f"{user_id}_{update.message.message_id}"
                self.pending_events[event_id] = event
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{event_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{event_id}")
                    ],
                    [
                        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{event_id}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if processing_message:
                    await processing_message.edit_text(message, reply_markup=reply_markup, parse_mode='Markdown')
                else:
                    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
                
            elif result.get('success'):
                response = f"‚úÖ {result['message']}"
                if result.get('event_link'):
                    response += f"\n\nüîó <a href=\"{result['event_link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ</a>"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML parse_mode –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
                if processing_message:
                    await processing_message.edit_text(response, parse_mode='HTML', disable_web_page_preview=True)
                else:
                    await update.message.reply_text(response, parse_mode='HTML', disable_web_page_preview=True)
            else:
                response = f"‚ùå {result['message']}"
                if processing_message:
                    await processing_message.edit_text(response)
                else:
                    await update.message.reply_text(response)

        except Exception as e:
            calendar_logger.log_error(e, "telegram_bot._process_text_request")
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            if processing_message:
                await processing_message.edit_text(error_message)
            else:
                await update.message.reply_text(error_message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self._is_user_allowed(update):
            await self._send_access_denied_message(update)
            return
            
        user_message = update.message.text
        user_id = str(update.effective_user.id) if update.effective_user else None
        username = update.effective_user.username if update.effective_user else None

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        calendar_logger.log_user_request(user_id, username, user_message)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        processing_message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await self._process_text_request(update, user_message, processing_message)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data
        
        if data.startswith("confirm_"):
            event_id = data.replace("confirm_", "")
            await self._confirm_event(query, event_id)
        elif data.startswith("cancel_"):
            event_id = data.replace("cancel_", "")
            await self._cancel_event(query, event_id)
        elif data.startswith("edit_"):
            event_id = data.replace("edit_", "")
            await self._edit_event(query, event_id)

    async def _confirm_event(self, query, event_id: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if event_id not in self.pending_events:
            await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return

        event = self.pending_events[event_id]
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            result = self.calendar_service.create_confirmed_event(event)
            
            if result.get('success'):
                response = f"‚úÖ {result['message']}"
                if result.get('event_link'):
                    response += f"\n\nüîó <a href=\"{result['event_link']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ</a>"
            else:
                response = f"‚ùå {result['message']}"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML parse_mode –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
            await query.edit_message_text(response, parse_mode='HTML', disable_web_page_preview=True)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            del self.pending_events[event_id]
            
        except Exception as e:
            calendar_logger.log_error(e, "telegram_bot._confirm_event")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

    async def _cancel_event(self, query, event_id: str):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if event_id in self.pending_events:
            del self.pending_events[event_id]
        
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    async def _edit_event(self, query, event_id: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        if event_id not in self.pending_events:
            await query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return

        event = self.pending_events[event_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_message = f"""‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

```
–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}
–í—Ä–µ–º—è: {event.start_time.strftime("%d.%m.%Y %H:%M")}"""

        if event.duration_minutes:
            edit_message += f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {event.duration_minutes} –º–∏–Ω—É—Ç"
        elif event.end_time:
            edit_message += f"\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {event.end_time.strftime("%H:%M")}"

        if event.description:
            edit_message += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}"

        edit_message += "\n```\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."

        await query.edit_message_text(edit_message, parse_mode='Markdown')
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del self.pending_events[event_id]

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        if self.allowed_users is None:
            print("üë• –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        else:
            users_count = len(self.allowed_users)
            print(f"üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–µ–π)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        if self.voice_service.is_model_loaded():
            print("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è.")
        
        self.application.run_polling()

