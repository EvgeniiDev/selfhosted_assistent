from typing import Dict, Any, Optional
import os
import json
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from logger import calendar_logger


SCOPES = ['https://www.googleapis.com/auth/calendar', 'https://www.googleapis.com/auth/tasks']


class GoogleCalendarClient:
    def __init__(self, credentials_path: str = "credentials.json"):
        credentials_path_from_env = os.getenv('GOOGLE_CREDENTIALS_PATH')
        self.credentials_path = credentials_path_from_env or credentials_path

        if not os.path.exists(self.credentials_path):
            raise Exception(f"Credentials file not found: {self.credentials_path}")

        services = self._authenticate()
        self.calendar_service = services.get('calendar')
        self.tasks_service = services.get('tasks')

    def _authenticate(self):
        """Authenticate and return dict with 'calendar' and 'tasks' services."""
        token_json = os.getenv('GOOGLE_OAUTH_TOKEN')
        if token_json:
            try:
                token_data = json.loads(token_json)
                creds = Credentials.from_authorized_user_info(token_data, SCOPES)
                if creds and creds.expired and creds.refresh_token:
                    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω...")
                    creds.refresh(Request())
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª)
                    print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
                
                if creds and creds.valid:
                    calendar_logger.info("Using Google token from environment")
                    return {
                        'calendar': build('calendar', 'v3', credentials=creds),
                        'tasks': build('tasks', 'v1', credentials=creds)
                    }
            except Exception as e:
                calendar_logger.warning(f"Failed to load token from env: {e}")

        # Fallback to interactive flow
        return self._authenticate_auto()

    def _authenticate_auto(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        print("üí° –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ main.env –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        if not os.path.exists(self.credentials_path):
            raise Exception(f"‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_path}")
        
        try:
            flow = InstalledAppFlow.from_client_secrets_file(
                self.credentials_path, SCOPES)
            
            print("üåê –û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            print("üìã –í–æ–π–¥–∏—Ç–µ –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)")
            
            creds = flow.run_local_server(port=0)
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self._print_token_info(creds)
            
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚ö†Ô∏è –í–ê–ñ–ù–û: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ã—à–µ –≤ main.env –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            return {
                'calendar': build('calendar', 'v3', credentials=creds),
                'tasks': build('tasks', 'v1', credentials=creds)
            }
            
        except Exception as e:
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    def _print_token_info(self, creds):
        try:
            token_data = json.loads(creds.to_json())
            token_json = json.dumps(token_data, separators=(',', ':'))
            
            print("\n" + "="*60)
            print("üìã –°–ö–û–ü–ò–†–£–ô–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –í main.env:")
            print("="*60)
            print(f"GOOGLE_OAUTH_TOKEN={token_json}")
        except Exception as e:
            calendar_logger.warning(f"Unable to serialize credentials for copy/paste: {e}")

    def create_event(self, event_data: Dict[str, Any], calendar_id: str = 'primary') -> Optional[Dict[str, Any]]:
        try:
            calendar_logger.log_calendar_request(event_data)
            event = self.calendar_service.events().insert(calendarId=calendar_id, body=event_data).execute()
            result = {
                'success': True,
                'event_id': event.get('id'),
                'event_link': event.get('htmlLink'),
                'message': f"–°–æ–±—ã—Ç–∏–µ '{event_data.get('summary')}' —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ"
            }
            calendar_logger.log_calendar_response(True, result)
            return result
        except Exception as e:
            result = {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}"
            }
            calendar_logger.log_calendar_response(False, result)
            calendar_logger.log_error(e, "google_calendar_client.create_event")
            return result

    def create_task(self, task_data: Dict[str, Any], tasklist: str = '@default') -> Optional[Dict[str, Any]]:
        """Create a task. Resolve tasklist id from env or by matching common titles, validate and fallback to '@default'."""
        try:
            calendar_logger.log_calendar_request(task_data)

            tasklist_id = os.getenv('GOOGLE_TASKLIST_ID')

            if not tasklist_id:
                tasklist_id = tasklist or '@default'

            calendar_logger.info(f"Using tasklist id: {tasklist_id}")

            task = self.tasks_service.tasks().insert(tasklist=tasklist_id, body=task_data).execute()
            result = {
                'success': True,
                'task_id': task.get('id'),
                'task': task,
                'message': f"–ó–∞–¥–∞—á–∞ '{task_data.get('title')}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            }

            calendar_logger.log_calendar_response(True, result)
            return result

        except Exception as e:
            result = {
                'success': False,
                'error': str(e),
                'message': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"
            }
            calendar_logger.log_calendar_response(False, result)
            calendar_logger.log_error(e, "google_calendar_client.create_task")
            return result
